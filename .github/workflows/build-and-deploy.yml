name: Build And Push Docker Image

on:
  push:
    branches: [ main ]

env:
  NAME: phero-srv
  IMAGE_NAME: ghcr.io/wennergr/phero-srv

jobs:
  docker:
    runs-on: ubuntu-latest

    permissions:
      packages: write

    outputs:
      image-digest: ${{ steps.container_info.outputs.image-digest }}
      image-tags: ${{ steps.container_info.outputs.image-tags }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3.0.0

      - name: Login to ghcr.io
        uses: docker/login-action@v1.14.1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker images
        run: |
          revision="$(git rev-parse "${GITHUB_REF_NAME:-HEAD}")"
          docker build \
            -t "${IMAGE_NAME}:latest" \
            -t "${IMAGE_NAME}:${GITHUB_REF_NAME}" \
            -t "${IMAGE_NAME}:${revision}" \
            --label "org.opencontainers.image.source=https://github.com/wennergr/${NAME}" \
            --label "org.opencontainers.image.created=$(date --iso-8601=seconds)" \
            --label "org.opencontainers.image.title=${NAME}" \
            --label "org.opencontainers.image.revision=${revision}" \
            --label "org.opencontainers.image.version=${GITHUB_REF_NAME}" \
            --label "org.opencontainers.image.licenses=MIT" \
            --label "org.opencontainers.image.vendor=Tobias Wennergren" \
            .

      - name: Publish Docker images
        run: docker push "${IMAGE_NAME}" --all-tags

      - name: Get container info
        id: container_info
        run: |
          image_digest="$(docker inspect "${IMAGE_NAME}:latest" --format '{{ index .RepoDigests 0 }}' | awk -F '@' '{ print $2 }')"
          image_tags="latest,${GITHUB_REF_NAME},$(git rev-parse "${GITHUB_REF_NAME:-HEAD}")"
          echo "::set-output name=image-digest::${image_digest}"
          echo "::set-output name=image-tags::${image_tags}"

  sign:
    runs-on: ubuntu-latest
    needs: [docker]

    permissions:
      packages: write
      id-token: write

    steps:
      - name: Install cosign
        uses: sigstore/cosign-installer@v2.1.0

      - name: Login to ghcr.io
        uses: docker/login-action@v1.14.1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Sign image
        env:
          COSIGN_EXPERIMENTAL: 1
          IMAGE_DIGEST: ${{ needs.docker.outputs.image-digest }}
        run: |
          cosign sign "${IMAGE_NAME}@${IMAGE_DIGEST}"
          echo "::notice title=Verify signature::cosign verify ${IMAGE_NAME}@${IMAGE_DIGEST} | jq '.[0]'"
          echo "::notice title=Inspect signature bundle::cosign verify ${IMAGE_NAME}@${IMAGE_DIGEST} | jq '.[0].optional.Bundle.Payload.body |= @base64d | .[0].optional.Bundle.Payload.body | fromjson'"
          echo "::notice title=Inspect certificate::cosign verify ${IMAGE_NAME}@${IMAGE_DIGEST} | jq -r '.[0].optional.Bundle.Payload.body |= @base64d | .[0].optional.Bundle.Payload.body | fromjson | .spec.signature.publicKey.content |= @base64d | .spec.signature.publicKey.content' | openssl x509 -text"


  sbom:
    runs-on: ubuntu-latest
    needs: [docker]

    permissions:
      packages: write
      id-token: write

    steps:
      - name: Install cosign
        uses: sigstore/cosign-installer@v2.1.0

      - name: Install Syft
        uses: anchore/sbom-action/download-syft@v0.7.0

      - name: Login to ghcr.io
        uses: docker/login-action@v1.14.1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Attach SBOM to image
        env:
          COSIGN_EXPERIMENTAL: 1
          IMAGE_DIGEST: ${{ needs.docker.outputs.image-digest }}

        run: |
          syft "${IMAGE_NAME}@${IMAGE_DIGEST}" -o spdx-json=sbom-spdx.json
          cosign attest --predicate sbom-spdx.json --type spdx "${IMAGE_NAME}@${IMAGE_DIGEST}"
          echo "::notice title=Verify SBOM attestation::cosign verify-attestation ${IMAGE_NAME}@${IMAGE_DIGEST} | jq '.payload |= @base64d | .payload | fromjson | select(.predicateType == \"https://spdx.dev/Document\") | .predicate.Data | fromjson'"

  provenance:
    runs-on: ubuntu-latest
    needs: [docker]

    permissions:
      packages: write
      id-token: write

    env:
      IMAGE_DIGEST: ${{ needs.docker.outputs.image-digest }}
      PROVENANCE_FILE: provenance.att

    steps:
      - name: Install cosign
        uses: sigstore/cosign-installer@v2.1.0

      - name: Generate provenance
        uses: philips-labs/slsa-provenance-action@v0.7.2
        with:
          command: generate
          subcommand: container
          arguments: --repository "${IMAGE_NAME}" --output-path "${PROVENANCE_FILE}" --digest "${IMAGE_DIGEST}" --tags "${IMAGE_TAGS}"
        env:
          COSIGN_EXPERIMENTAL: 0
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          IMAGE_TAGS: ${{ needs.docker.outputs.image-tags }}

      - name: Login to ghcr.io
        uses: docker/login-action@v1.14.1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Attach provenance
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          jq '.predicate' "${PROVENANCE_FILE}" > provenance-predicate.att
          cosign attest --predicate provenance-predicate.att --type slsaprovenance "${IMAGE_NAME}@${IMAGE_DIGEST}"
          cosign verify-attestation ${IMAGE_NAME}@${IMAGE_DIGEST}
          echo "::notice title=Verify provenance attestation::cosign verify-attestation ${IMAGE_NAME}@${IMAGE_DIGEST} | jq '.payload |= @base64d | .payload | fromjson | select(.predicateType == \"https://slsa.dev/provenance/v0.2\")'"



